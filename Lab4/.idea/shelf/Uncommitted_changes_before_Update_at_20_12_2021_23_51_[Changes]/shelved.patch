Index: src/Shorties/Shorty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Shorties;\r\n\r\n\r\nimport utility.MoveException;\r\n\r\nimport java.util.Objects;\r\nimport java.lang.*;\r\n\r\npublic abstract class Shorty {\r\n    private final String name;\r\n    //private Location location;\r\n    private LeaveMoveTo location;\r\n    //private Hospital place;\r\n    private boolean brokenLeg = false;\r\n    private boolean hasTumour = false;\r\n    double temperature = 36.6;\r\n\r\n\r\n    public Shorty(String n) {\r\n        name = n;\r\n        location = null;\r\n    }\r\n\r\n//    public Shorty(String n, Location notDefault) {\r\n//        name = n;\r\n//        LOCATION = notDefault;\r\n//    }\r\n\r\n    public Shorty(String n, LeaveMoveTo notDefault) {\r\n        name = n;\r\n        location = notDefault;\r\n        moveIn(notDefault);\r\n    }\r\n\r\n\r\n    public void move(LeaveMoveTo newLocation) {\r\n        if (newLocation != location) {\r\n            try {\r\n                leavePlace(location);\r\n//                if (newLocation.getClass().getEnclosingClass() != Hospital.class) {\r\n//                    System.out.println(getName() + \" escapes from Hospital\");\r\n//                }\r\n                if (location.getClass().getEnclosingClass() == City.class) {\r\n                    System.out.println(this + \" returned to Hospital\");\r\n                }\r\n                if (location.getClass() == Hospital.StorageRoom.class) {\r\n                    if (this instanceof MedicalStaff) {\r\n                        System.out.println(this + \" went to Storage Room\");\r\n                    }\r\n//                    else{\r\n//                        System.out.println(this + \" sneaked to Storage Room\");\r\n//                    }\r\n                }\r\n                if (newLocation.getClass().getEnclosingClass() == City.class) {\r\n                    System.out.println(this + \" ran to city\");\r\n                }\r\n                moveIn(newLocation);\r\n                location = newLocation;\r\n            } catch (MoveException ex) {\r\n                System.out.println(this + \" tried to run, but his leg is still broken, he fell!\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void leavePlace(LeaveMoveTo locat) throws MoveException {\r\n        if (isBrokenLeg()) {\r\n            throw new MoveException();\r\n        } else {\r\n            locat.remove(this);\r\n        }\r\n    }\r\n\r\n\r\n    private void moveIn(LeaveMoveTo locat) {\r\n        locat.add(this);\r\n    }\r\n\r\n\r\n    public void temperatureHasRisen() {\r\n        temperature++;\r\n        System.out.println(this + \"'s temperature has risen\");\r\n    }\r\n\r\n    public void temperatureDecreased() {\r\n        temperature--;\r\n        System.out.println(this + \"'s temperature has risen\");\r\n    }\r\n\r\n    public void speak(String text) {\r\n        System.out.println(this + \": \" + text);\r\n    }\r\n\r\n    public void wakeUp() {\r\n        System.out.println(this + \" woke up\");\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public LeaveMoveTo getLocation() {\r\n        return location;\r\n    }\r\n\r\n    protected abstract void complain();\r\n\r\n\r\n    protected void tire() {\r\n        System.out.println(this.getName() + \": I'm incredibly tired!\");\r\n    }\r\n\r\n    public void runAfter(Shorty shorty) {\r\n        System.out.println(this + \" ran after \" + shorty);\r\n    }\r\n\r\n    public void takeClothes(Hospital.StorageRoom storageRoom) {\r\n        move(storageRoom);\r\n        System.out.println(this + \" sneaked to Storage room\");\r\n        storageRoom.getCloth();\r\n        storageRoom.getCloth();\r\n        System.out.println(this + \" took clothes\");\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (!(o instanceof Shorty)) return false;\r\n        Shorty shorty = (Shorty) o;\r\n        return Objects.equals(name, shorty.name);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return name.hashCode();\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return getName();\r\n    }\r\n\r\n    public boolean isBrokenLeg() {\r\n        return brokenLeg;\r\n    }\r\n\r\n    public void setBrokenLeg(boolean brokenLeg) {\r\n        this.brokenLeg = brokenLeg;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Shorties/Shorty.java b/src/Shorties/Shorty.java
--- a/src/Shorties/Shorty.java	(revision d71a1689424c50bf673c4a71b226939a690108a9)
+++ b/src/Shorties/Shorty.java	(date 1640031771858)
@@ -12,7 +12,6 @@
     private LeaveMoveTo location;
     //private Hospital place;
     private boolean brokenLeg = false;
-    private boolean hasTumour = false;
     double temperature = 36.6;
 
 
@@ -21,10 +20,6 @@
         location = null;
     }
 
-//    public Shorty(String n, Location notDefault) {
-//        name = n;
-//        LOCATION = notDefault;
-//    }
 
     public Shorty(String n, LeaveMoveTo notDefault) {
         name = n;
@@ -57,7 +52,7 @@
                 moveIn(newLocation);
                 location = newLocation;
             } catch (MoveException ex) {
-                System.out.println(this + " tried to run, but his leg is still broken, he fell!");
+                System.out.println(this + " tried to run, but he twisted his leg and fell!");
             }
         }
     }
@@ -116,10 +111,7 @@
 
     public void takeClothes(Hospital.StorageRoom storageRoom) {
         move(storageRoom);
-        System.out.println(this + " sneaked to Storage room");
         storageRoom.getCloth();
-        storageRoom.getCloth();
-        System.out.println(this + " took clothes");
     }
 
     @Override
Index: src/Shorties/Nurse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Shorties;\r\n\r\nimport Meals.Meal;\r\nimport utility.*;\r\n\r\npublic class Nurse extends Shorty implements HospitalStaff, MedicalStaff {\r\n\r\n\r\n    public Nurse() {\r\n        super(\"Nurse\");\r\n    }\r\n\r\n    public Nurse(LeaveMoveTo notDefault) {\r\n\r\n        super(\"Nurse\", notDefault);\r\n    }\r\n\r\n    protected Meal perform(Meal meal, LeaveMoveTo kitchen) {\r\n        boolean f = false;\r\n        move(kitchen);\r\n        for (Shorty shorty : kitchen.getShortiesHere()) {\r\n            if (shorty instanceof Cook) {\r\n                f = true;\r\n                askCook(meal, (Cook) shorty);\r\n            }\r\n        }\r\n        if (!f) {\r\n            throw new NoCookException();\r\n        } else {\r\n            return meal;\r\n        }\r\n    }\r\n\r\n    protected Object lookForSmth(Object o, LeaveMoveTo where){\r\n        LeaveMoveTo loc = getLocation();\r\n        move(where);\r\n        tireOfSeeking();\r\n        move(loc);\r\n        return null;\r\n    }\r\n\r\n    public void checkStorage(){\r\n        System.out.println(this + \": two clothes missing!\");\r\n    }\r\n\r\n    public void carryPatientTo(Shorty patient, Object o){\r\n        System.out.println(patient + \" was carried to \" + o);\r\n    }\r\n    protected void tireOfSeeking(){\r\n        System.out.println(this + \": I'm tired of walking. I hope he's forgotten about it\");\r\n    }\r\n\r\n    protected Meal askCook(Meal meal, Cook c) {\r\n       // System.out.println(\"Nurse: Cook \"+ meal.getIngridient().ingridientName() + \" \" + meal.getName());\r\n        return c.cook(meal);\r\n    }\r\n\r\n    @Override\r\n    public void washFloor() {\r\n        move(getLocation());\r\n        System.out.println(this.getName() + \" washes the floor in StaffRoom\");\r\n    }\r\n\r\n    @Override\r\n    public Bandage putBandage() {\r\n        return new Bandage();\r\n    }\r\n\r\n    @Override\r\n    public Cast putCast() {\r\n        return new Cast();\r\n    }\r\n\r\n    @Override\r\n    protected void complain(){\r\n        System.out.println(\"What a terrible patient! He'd rather get well soon\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Shorties/Nurse.java b/src/Shorties/Nurse.java
--- a/src/Shorties/Nurse.java	(revision d71a1689424c50bf673c4a71b226939a690108a9)
+++ b/src/Shorties/Nurse.java	(date 1640030922930)
@@ -50,9 +50,8 @@
         System.out.println(this + ": I'm tired of walking. I hope he's forgotten about it");
     }
 
-    protected Meal askCook(Meal meal, Cook c) {
+    protected void askCook(Meal meal, Cook c) {
        // System.out.println("Nurse: Cook "+ meal.getIngridient().ingridientName() + " " + meal.getName());
-        return c.cook(meal);
     }
 
     @Override
Index: src/Shorties/Vorchun.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Shorties;\r\n\r\npublic class Vorchun extends Shorty {\r\n    public Vorchun() {\r\n        super(\"Vorchun\");\r\n    }\r\n\r\n    public Vorchun(LeaveMoveTo notDefault) {\r\n\r\n        super(\"Vorchun\", notDefault);\r\n    }\r\n\r\n    public void escape(Hospital hosp){\r\n\r\n    }\r\n\r\n    public void putOnClothes(Object o){\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void complain() {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Shorties/Vorchun.java b/src/Shorties/Vorchun.java
--- a/src/Shorties/Vorchun.java	(revision d71a1689424c50bf673c4a71b226939a690108a9)
+++ b/src/Shorties/Vorchun.java	(date 1640031771872)
@@ -10,6 +10,14 @@
         super("Vorchun", notDefault);
     }
 
+    @Override
+    public void takeClothes(Hospital.StorageRoom storageRoom) {
+        System.out.println(this + " sneaked to Storage room");
+        super.takeClothes(storageRoom);
+        storageRoom.getCloth();
+        System.out.println(this + " took clothes");
+    }
+
     public void escape(Hospital hosp){
 
     }
